#!/usr/bin/env ruby
require 'thor'
require_relative '../lib/cli'

class Dev < Thor
def self.config
  {"repo_name"=>"kimoja-cheerz-dev-cli", "workspace_path"=>"/Users/joakimcarrilho/dev/tools/toolbox/kimoja-cheerz-dev-cli", "github_owner"=>"Kimoja", "todo_path"=>"/Users/joakimcarrilho/dev/todo.md", "deepl_api_key"=>"b821099d-2114-2457-d06a-2cc2bfc1a6be:fx", "tags_paths"=>["\#{workspace_path}/tags"], "lib_path"=>"/Users/joakimcarrilho/dev/tools/toolbox/kimoja-cheerz-dev-cli/lib/cli", "command_path"=>"dev"}.merge({})
end

::Cli::Command.define_method(:exec_code) do 
  open_vscode(config.workspace_path, '')
end

desc("code", "Open vscode project")
method_options({})
def code()
 ::Cli::Command.new(
    ::Cli::Command::Arguments.new(), 
    ::Cli::Command::Options.new(options), 
    ::Cli::Command::Config.new(::Dev.config.dup.merge({
  command_name: 'code',
  command_path: 'dev code', 
})
)
).exec
end

::Cli::Command.define_method(:exec_gh) do 
  system_open(github_url)
end

desc("gh", "Open Github repository")
method_options({})
def gh()
 ::Cli::Command.new(
    ::Cli::Command::Arguments.new(), 
    ::Cli::Command::Options.new(options), 
    ::Cli::Command::Config.new(::Dev.config.dup.merge({
  command_name: 'gh',
  command_path: 'dev gh', 
})
)
).exec
end

::Cli::Command.define_method(:exec_srv) do 
  system_open('https://zkrin.cheerz.com/dashboards/tech-server')
end

desc("srv", "Open Zkrin")
method_options({})
def srv()
 ::Cli::Command.new(
    ::Cli::Command::Arguments.new(), 
    ::Cli::Command::Options.new(options), 
    ::Cli::Command::Config.new(::Dev.config.dup.merge({
  command_name: 'srv',
  command_path: 'dev srv', 
})
)
).exec
end

::Cli::Command.define_method(:exec_kport) do 
  system_exec("kill -9 $(lsof -ti:#{arguments.ports})")
end

desc("kport PORTS", "Kills open processes on given ports")
method_options({})
def kport(ports)
 ::Cli::Command.new(
    ::Cli::Command::Arguments.new(ports: ports), 
    ::Cli::Command::Options.new(options), 
    ::Cli::Command::Config.new(::Dev.config.dup.merge({
  command_name: 'kport',
  command_path: 'dev kport', 
})
)
).exec
end


desc("todo *TODO", "Add a todo and open the todolist file, format: dev todo description of my todo")
method_options({})
def todo(*todo)
 ::Cli::Command::Todo.new(
    ::Cli::Command::Todo::Arguments.new(todo: todo), 
    ::Cli::Command::Todo::Options.new(options), 
    ::Cli::Command::Todo::Config.new(::Dev.config.dup.merge({
  command_name: 'todo',
  command_path: 'dev todo', 
})
)
).exec
end


desc("tag *TAGS", "Search by tags, format: dev tag tag1 tag2 tag3")
method_options({})
def tag(*tags)
 ::Cli::Command::Tag.new(
    ::Cli::Command::Tag::Arguments.new(tags: tags), 
    ::Cli::Command::Tag::Options.new(options), 
    ::Cli::Command::Tag::Config.new(::Dev.config.dup.merge({
  command_name: 'tag',
  command_path: 'dev tag', 
})
)
).exec
end

class Json < Thor
def self.config
  {"zsh_alias"=>"json", "command_path"=>"dev json"}.merge(::Dev.config)
end


desc("format JSON", "Format passed or in clipboard JSON")
method_options({})
def format(json = nil)
 ::Cli::Command::Json.new(
    ::Cli::Command::Json::Arguments.new(json: json), 
    ::Cli::Command::Json::Options.new(options), 
    ::Cli::Command::Json::Config.new(::Dev::Json.config.dup.merge({
  command_name: 'format',
  command_path: 'dev json format', 
})
)
).exec
end


desc("to_ruby JSON", "Transforms passed or in clipboard JSON to Ruby")
method_options({})
def to_ruby(json = nil)
 ::Cli::Command::Json.new(
    ::Cli::Command::Json::Arguments.new(json: json), 
    ::Cli::Command::Json::Options.new(options), 
    ::Cli::Command::Json::Config.new(::Dev::Json.config.dup.merge({
  command_name: 'to_ruby',
  command_path: 'dev json to_ruby', 
})
)
).exec
end


desc("eval to_eval", "Transforms passed or in clipboard JS or Ruby to JSON")
method_options({})
def eval(to_eval = nil)
 ::Cli::Command::Json.new(
    ::Cli::Command::Json::Arguments.new(to_eval: to_eval), 
    ::Cli::Command::Json::Options.new(options), 
    ::Cli::Command::Json::Config.new(::Dev::Json.config.dup.merge({
  command_name: 'eval',
  command_path: 'dev json eval', 
})
)
).exec
end

end
desc("json SUBCOMMAND", "json Commands")
subcommand("json", Json)

class Tr < Thor
def self.config
  {"command_path"=>"dev tr"}.merge(::Dev.config)
end


desc("en *TEXT", "Translate the text in English")
method_options({})
def en(*text)
 ::Cli::Command::Tr.new(
    ::Cli::Command::Tr::Arguments.new(text: text), 
    ::Cli::Command::Tr::Options.new(options), 
    ::Cli::Command::Tr::Config.new(::Dev::Tr.config.dup.merge({
  command_name: 'en',
  command_path: 'dev tr en', 
})
)
).exec
end


desc("fr *TEXT", "Translate the text in french")
method_options({})
def fr(*text)
 ::Cli::Command::Tr.new(
    ::Cli::Command::Tr::Arguments.new(text: text), 
    ::Cli::Command::Tr::Options.new(options), 
    ::Cli::Command::Tr::Config.new(::Dev::Tr.config.dup.merge({
  command_name: 'fr',
  command_path: 'dev tr fr', 
})
)
).exec
end

end
desc("tr SUBCOMMAND", "tr Commands")
subcommand("tr", Tr)

end
unless defined?($generathor_in_build)
  Dev.start
end

